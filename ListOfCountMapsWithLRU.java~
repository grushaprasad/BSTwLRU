import java.util.*;

public class ListOfCountMapsWithLRU <K extends Comparable <? super K>> implements CountMap<K>  {
 
  private ArrayList<BSTwithLRU<K>> list = new ArrayList<BSTwithLRU<K>>(new BSTwithLRU<K>());
 
  
  
  
  // INTERFACE METHOD:
  public void add(K key) {
    System.out.println("Method is being called");
    boolean updated = false;
    Map.Entry<K, Integer> removed = null;
    int i = 0;
    int k = 0;
    while (i < list.size()) {   //for each tree in the list, it tries to update. If its updated or finishes looking at all the trees, it breaks while loop
      System.out.println("Entered while loop");
      updated = list.get(i).update(key, 1);
      if (updated) {
        removed = list.get(i).remove(key);  //remove the key
        list.get(0).add(key, removed.getValue());
        System.out.println("added " + key + " to list");
        if (list.get(0).size() > 10) {
          removed = list.get(0).removeLRU();
          k = 1;
          while (k < list.size()) {
            list.get(k).add(removed.getKey(), removed.getValue()); // adds the particular key and value of the previously removed LRU to the kth tree
            if (list.get(k).size() > Math.pow(list.get(k-1).size(), 2)) k++;   //if size is greater, increase k, continue while loop
            else break; //and end the while loop 
          }
        }       
        break;
      }// we can break out of while loop once we've updated
    }
    
    
    if ((list.size() > 0) && (updated == false)) {   // after the while loop updated wasn't changed to true - so no update happened
      list.get(0).add(key, 1);   //adds the key to the list
      if (list.get(0).size() > 10) {
          removed = list.get(0).removeLRU();
          k = 1;
          while (k < list.size()) {
            list.get(k).add(removed.getKey(), removed.getValue()); // adds the particular key and value of the previously removed LRU to the kth tree
            if (list.get(k).size() > Math.pow(list.get(k-1).size(), 2)) { //if the size of current tree is greater than it should be
              removed = list.get(k).removeLRU();   //remove the LRU from the existing tree
              k++; //increment k
            }
            else break; //and end the while loop 
          }
          
          if (k == list.size() && list.get(k).size() > Math.pow(list.get(k-1).size(), 2)) { //if the last tree in the list had size more than number of elements (then removed is already = the LRU removd from the last tree)
            list.add(new BSTwithLRU<K>());  // add a new BSTwithLRU to the list
            list.get(list.size()-1).add(removed.getKey(), removed.getValue()); //add the removed value to this new list. 
          }    
      }
    } 
  } 
  
  
  
  
  public int get (K key) {
    int frequency = 0;
    Map.Entry<K, Integer> removed = null;
    for (int i = 0; i < list.size(); i++) {
      frequency = list.get(i).get(key);
      if (frequency > 0) {
        removed = list.get(i).removeLRU();
        list.get(0).add(removed.getKey(), removed.getValue());
        if (list.get(0).size() > 10) {    // Making sure that the correct sizes are maintained!
          removed = list.get(0).removeLRU();
          int k = 1;
          while (k < list.size()) {
            list.get(k).add(removed.getKey(), removed.getValue()); // adds the particular key and value of the previously removed LRU to the kth tree
            if (list.get(k).size() > Math.pow(list.get(k-1).size(), 2)) { //if the size of current tree is greater than it should be
              removed = list.get(k).removeLRU();   //remove the LRU from the existing tree
              k++; //increment k
            }
            else break; //and end the while loop 
          }
          
          if (k == list.size() && list.get(k).size() > Math.pow(list.get(k-1).size(), 2)) { //if the last tree in the list had size more than number of elements (then removed is already = the LRU removd from the last tree)
            list.add(new BSTwithLRU<K>());  // add a new BSTwithLRU to the list
            list.get(list.size()-1).add(removed.getKey(), removed.getValue()); //add the removed value to this new list. 
          }    
        }
        break; //so that if we've found it in a particular list then we don't have to go through all the other lists
      }
    }
    
    return frequency;
  }
  
  
  
  
  public List<Map.Entry<K, Integer>> entryList() {
    ArrayList<Map.Entry<K, Integer>> entryList = new ArrayList<Map.Entry<K, Integer>>();
    for (int i = 0; i < list.size(); i++) {
      list.get(i).addToList(entryList);   
    }
    return entryList;
  }
  
  
  

  
  public int size() {
    return entryList().size();
  }  
  
}